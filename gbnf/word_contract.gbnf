# Grammar to produce exactly one JSON object for the linguistics spec.
# Arrays may be empty; all required keys present; values are strings unless otherwise specified.
# Some semantic rules (like unique partOfSpeech) are enforced post-parse in Rust.


root ::= object
ws ::= [ \t\n\r]*
object ::= "{" ws members ws "}"
members ::= pair (ws "," ws pair)*


pair ::= (
"\"word\"" ws ":" ws string_nonempty |
"\"baseForm\"" ws ":" ws string_lower |
"\"phonetic\"" ws ":" ws ipa_string |
"\"difficulty\"" ws ":" ws ("\"beginner\""|"\"intermediate\""|"\"advanced\"") |
"\"language\"" ws ":" ws "\"english\"" |
"\"meanings\"" ws ":" ws meanings
)


meanings ::= "[" ws (sense (ws "," ws sense){0,3})? ws "]"
sense ::= "{" ws sense_members ws "}"
sense_members ::= sense_pair (ws "," ws sense_pair){6}


sense_pair ::= (
"\"definition\"" ws ":" ws string_30_480 |
"\"partOfSpeech\"" ws ":" ws pos |
"\"exampleSentence\"" ws ":" ws string_max200 |
"\"grammarTip\"" ws ":" ws string_max160 |
"\"synonyms\"" ws ":" ws string_array_0_8 |
"\"antonyms\"" ws ":" ws string_array_0_6 |
"\"translations\"" ws ":" ws translations
)


pos ::= "\"noun\""|"\"verb\""|"\"adjective\""|"\"adverb\""|"\"pronoun\""|"\"preposition\""|"\"conjunction\""|"\"interjection\""|"\"article\""|"\"determiner\""|"\"numeral\""|"\"participle\""|"\"gerund\""


translations ::= "{" ws
"\"es\"" ws ":" ws string_nonempty ws "," ws
"\"fr\"" ws ":" ws string_nonempty ws "," ws
"\"de\"" ws ":" ws string_nonempty ws "," ws
"\"zh\"" ws ":" ws string_nonempty ws "," ws
"\"ja\"" ws ":" ws string_nonempty ws "," ws
"\"it\"" ws ":" ws string_nonempty ws "," ws
"\"pt\"" ws ":" ws string_nonempty ws "," ws
"\"ru\"" ws ":" ws string_nonempty ws "," ws
"\"ar\"" ws ":" ws string_nonempty
ws "}"


string_nonempty ::= "\"" string_char+ "\""
string_lower ::= "\"" lower_char+ "\""


string_char ::= escape | ~["\\]
lower_char ::= [a-z0-9 /.,;:'!?()_-] | escape
escape ::= "\\" ["\\/bfnrt]


ipa_string ::= "\"/" ipa_char+ "/\""
ipa_char ::= escape | ~["\\/]


string_max200 ::= "\"" (~["\\] | escape){0,200} "\""
string_max160 ::= "\"" (~["\\] | escape){0,160} "\""
string_30_480 ::= "\"" (~["\\] | escape){30,480} "\""


string_array_0_8 ::= "[" ws (string_nonempty (ws "," ws string_nonempty){0,7})? ws "]"
string_array_0_6 ::= "[" ws (string_nonempty (ws "," ws string_nonempty){0,5})? ws "]"
